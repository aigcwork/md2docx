# -----------------------------------------------------------------------------
# 阶段 1: 基础环境和依赖安装
# -----------------------------------------------------------------------------
# 选择一个轻量级的、包含 Python 3.10 的官方镜像作为基础
# bookworm 是 Debian 12 的代号，是一个稳定且更新的操作系统版本
FROM python:3.10-slim-bookworm

# 设置一些环境变量，优化 Python 运行
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# -----------------------------------------------------------------------------
# 阶段 2: 安装系统级依赖 (Pandoc)
# -----------------------------------------------------------------------------
# 在 Debian 系统中安装 Pandoc。这是我们应用的核心转换工具。
# - apt-get update: 更新软件包列表
# - apt-get install -y pandoc: 安装 pandoc，-y 表示自动确认
# - rm -rf /var/lib/apt/lists/*: 清理安装缓存，减小最终镜像体积
RUN apt-get update && \
    apt-get install -y pandoc && \
    rm -rf /var/lib/apt/lists/*

# -----------------------------------------------------------------------------
# 阶段 3: 安装 Python 应用依赖
# -----------------------------------------------------------------------------
# 设置容器内的工作目录，后续所有操作都在这个目录下进行
WORKDIR /app

# 先只复制依赖清单文件
# 这样做可以利用 Docker 的缓存机制。只要 requirements.txt 不变，
# 下面的 RUN pip install 就不会重复执行，能大大加快后续构建速度。
COPY requirements.txt .

# 安装 Python 依赖包。
# -i 使用国内的清华镜像源，可以极大地加速下载速度。
# --no-cache-dir 表示不保存缓存，同样是为了减小镜像体积。
RUN pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ --no-cache-dir

# -----------------------------------------------------------------------------
# 阶段 4: 复制代码并定义启动命令
# -----------------------------------------------------------------------------
# 复制项目目录下的所有文件到容器的 /app 目录中
COPY . .

# 声明容器将要监听的端口。这主要是为了文档目的。
# 真正让应用监听这个端口的是下面的 CMD 指令。
EXPOSE 9000

# 定义容器启动时要执行的命令。
# 这是函数计算平台（FC）启动我们应用的方式。
# 我们使用 Gunicorn 这个生产级的 Web 服务器来运行我们的 Flask 应用。
# --workers=4: 启动4个工作进程处理请求
# --bind 0.0.0.0:9000: 监听所有网络接口的 9000 端口
# app:app: 运行 app.py 文件中的名为 app 的 Flask 实例
CMD ["gunicorn", "--workers=4", "--bind", "0.0.0.0:9000", "app:app"]